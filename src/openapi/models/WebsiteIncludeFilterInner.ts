/* tslint:disable */
/* eslint-disable */
/**
 * package or prject name
 * Website crawling
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WebsiteIncludeFilterItems } from './WebsiteIncludeFilterItems';
import {
    WebsiteIncludeFilterItemsFromJSON,
    WebsiteIncludeFilterItemsFromJSONTyped,
    WebsiteIncludeFilterItemsToJSON,
} from './WebsiteIncludeFilterItems';
import type { WebsiteScopeFilter } from './WebsiteScopeFilter';
import {
    WebsiteScopeFilterFromJSON,
    WebsiteScopeFilterFromJSONTyped,
    WebsiteScopeFilterToJSON,
} from './WebsiteScopeFilter';

/**
 * 
 * @export
 * @interface WebsiteIncludeFilterInner
 */
export interface WebsiteIncludeFilterInner {
    /**
     * 
     * @type {string}
     * @memberof WebsiteIncludeFilterInner
     */
    relation?: WebsiteIncludeFilterInnerRelationEnum;
    /**
     * 
     * @type {WebsiteScopeFilter}
     * @memberof WebsiteIncludeFilterInner
     */
    scope?: WebsiteScopeFilter;
}


/**
 * @export
 */
export const WebsiteIncludeFilterInnerRelationEnum = {
    Pages: 'pages',
    WebsiteErrors: 'websiteErrors'
} as const;
export type WebsiteIncludeFilterInnerRelationEnum = typeof WebsiteIncludeFilterInnerRelationEnum[keyof typeof WebsiteIncludeFilterInnerRelationEnum];


/**
 * Check if a given object implements the WebsiteIncludeFilterInner interface.
 */
export function instanceOfWebsiteIncludeFilterInner(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function WebsiteIncludeFilterInnerFromJSON(json: any): WebsiteIncludeFilterInner {
    return WebsiteIncludeFilterInnerFromJSONTyped(json, false);
}

export function WebsiteIncludeFilterInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebsiteIncludeFilterInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'relation': !exists(json, 'relation') ? undefined : json['relation'],
        'scope': !exists(json, 'scope') ? undefined : WebsiteScopeFilterFromJSON(json['scope']),
    };
}

export function WebsiteIncludeFilterInnerToJSON(value?: WebsiteIncludeFilterInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'relation': value.relation,
        'scope': WebsiteScopeFilterToJSON(value.scope),
    };
}

