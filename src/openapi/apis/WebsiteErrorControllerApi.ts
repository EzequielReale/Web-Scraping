/* tslint:disable */
/* eslint-disable */
/**
 * package or prject name
 * Website crawling
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoopbackCount,
  NewWebsiteError,
  WebsiteError,
  WebsiteErrorFilter,
  WebsiteErrorFilter1,
  WebsiteErrorPartial,
  WebsiteErrorWithRelations,
} from '../models/index';
import {
    LoopbackCountFromJSON,
    LoopbackCountToJSON,
    NewWebsiteErrorFromJSON,
    NewWebsiteErrorToJSON,
    WebsiteErrorFromJSON,
    WebsiteErrorToJSON,
    WebsiteErrorFilterFromJSON,
    WebsiteErrorFilterToJSON,
    WebsiteErrorFilter1FromJSON,
    WebsiteErrorFilter1ToJSON,
    WebsiteErrorPartialFromJSON,
    WebsiteErrorPartialToJSON,
    WebsiteErrorWithRelationsFromJSON,
    WebsiteErrorWithRelationsToJSON,
} from '../models/index';

export interface WebsiteErrorControllerCountRequest {
    where?: { [key: string]: any; };
}

export interface WebsiteErrorControllerCreateRequest {
    newWebsiteError?: NewWebsiteError;
}

export interface WebsiteErrorControllerDeleteByIdRequest {
    id: string;
}

export interface WebsiteErrorControllerFindRequest {
    filter?: WebsiteErrorFilter1;
}

export interface WebsiteErrorControllerFindByIdRequest {
    id: string;
    filter?: WebsiteErrorFilter;
}

export interface WebsiteErrorControllerReplaceByIdRequest {
    id: string;
    websiteError?: WebsiteError;
}

export interface WebsiteErrorControllerUpdateAllRequest {
    where?: { [key: string]: any; };
    websiteErrorPartial?: WebsiteErrorPartial;
}

export interface WebsiteErrorControllerUpdateByIdRequest {
    id: string;
    websiteErrorPartial?: WebsiteErrorPartial;
}

/**
 * 
 */
export class WebsiteErrorControllerApi extends runtime.BaseAPI {

    /**
     */
    async websiteErrorControllerCountRaw(requestParameters: WebsiteErrorControllerCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoopbackCount>> {
        const queryParameters: any = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/website-errors/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoopbackCountFromJSON(jsonValue));
    }

    /**
     */
    async websiteErrorControllerCount(requestParameters: WebsiteErrorControllerCountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoopbackCount> {
        const response = await this.websiteErrorControllerCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteErrorControllerCreateRaw(requestParameters: WebsiteErrorControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebsiteError>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/website-errors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewWebsiteErrorToJSON(requestParameters.newWebsiteError),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteErrorFromJSON(jsonValue));
    }

    /**
     */
    async websiteErrorControllerCreate(requestParameters: WebsiteErrorControllerCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebsiteError> {
        const response = await this.websiteErrorControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteErrorControllerDeleteByIdRaw(requestParameters: WebsiteErrorControllerDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websiteErrorControllerDeleteById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/website-errors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async websiteErrorControllerDeleteById(requestParameters: WebsiteErrorControllerDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.websiteErrorControllerDeleteByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteErrorControllerFindRaw(requestParameters: WebsiteErrorControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WebsiteErrorWithRelations>>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/website-errors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WebsiteErrorWithRelationsFromJSON));
    }

    /**
     */
    async websiteErrorControllerFind(requestParameters: WebsiteErrorControllerFindRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WebsiteErrorWithRelations>> {
        const response = await this.websiteErrorControllerFindRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteErrorControllerFindByIdRaw(requestParameters: WebsiteErrorControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebsiteErrorWithRelations>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websiteErrorControllerFindById.');
        }

        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/website-errors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteErrorWithRelationsFromJSON(jsonValue));
    }

    /**
     */
    async websiteErrorControllerFindById(requestParameters: WebsiteErrorControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebsiteErrorWithRelations> {
        const response = await this.websiteErrorControllerFindByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteErrorControllerReplaceByIdRaw(requestParameters: WebsiteErrorControllerReplaceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websiteErrorControllerReplaceById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/website-errors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WebsiteErrorToJSON(requestParameters.websiteError),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async websiteErrorControllerReplaceById(requestParameters: WebsiteErrorControllerReplaceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.websiteErrorControllerReplaceByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteErrorControllerUpdateAllRaw(requestParameters: WebsiteErrorControllerUpdateAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoopbackCount>> {
        const queryParameters: any = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/website-errors`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WebsiteErrorPartialToJSON(requestParameters.websiteErrorPartial),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoopbackCountFromJSON(jsonValue));
    }

    /**
     */
    async websiteErrorControllerUpdateAll(requestParameters: WebsiteErrorControllerUpdateAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoopbackCount> {
        const response = await this.websiteErrorControllerUpdateAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteErrorControllerUpdateByIdRaw(requestParameters: WebsiteErrorControllerUpdateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websiteErrorControllerUpdateById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/website-errors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WebsiteErrorPartialToJSON(requestParameters.websiteErrorPartial),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async websiteErrorControllerUpdateById(requestParameters: WebsiteErrorControllerUpdateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.websiteErrorControllerUpdateByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
