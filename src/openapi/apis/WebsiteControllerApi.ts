/* tslint:disable */
/* eslint-disable */
/**
 * searchservice
 * Website crawling
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoopbackCount,
  NewWebsite,
  Website,
  WebsiteFilter,
  WebsiteFilter1,
  WebsitePartial,
  WebsiteWithRelations,
} from '../models/index';
import {
    LoopbackCountFromJSON,
    LoopbackCountToJSON,
    NewWebsiteFromJSON,
    NewWebsiteToJSON,
    WebsiteFromJSON,
    WebsiteToJSON,
    WebsiteFilterFromJSON,
    WebsiteFilterToJSON,
    WebsiteFilter1FromJSON,
    WebsiteFilter1ToJSON,
    WebsitePartialFromJSON,
    WebsitePartialToJSON,
    WebsiteWithRelationsFromJSON,
    WebsiteWithRelationsToJSON,
} from '../models/index';

export interface WebsiteControllerCountRequest {
    where?: { [key: string]: any; };
}

export interface WebsiteControllerCreateRequest {
    newWebsite?: NewWebsite;
}

export interface WebsiteControllerDeleteByIdRequest {
    id: string;
}

export interface WebsiteControllerFindRequest {
    filter?: WebsiteFilter1;
}

export interface WebsiteControllerFindByIdRequest {
    id: string;
    filter?: WebsiteFilter;
}

export interface WebsiteControllerReplaceByIdRequest {
    id: string;
    website?: Website;
}

export interface WebsiteControllerUpdateAllRequest {
    where?: { [key: string]: any; };
    websitePartial?: WebsitePartial;
}

export interface WebsiteControllerUpdateByIdRequest {
    id: string;
    websitePartial?: WebsitePartial;
}

/**
 * 
 */
export class WebsiteControllerApi extends runtime.BaseAPI {

    /**
     */
    async websiteControllerCountRaw(requestParameters: WebsiteControllerCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoopbackCount>> {
        const queryParameters: any = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/websites/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoopbackCountFromJSON(jsonValue));
    }

    /**
     */
    async websiteControllerCount(requestParameters: WebsiteControllerCountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoopbackCount> {
        const response = await this.websiteControllerCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteControllerCreateRaw(requestParameters: WebsiteControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Website>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/websites`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewWebsiteToJSON(requestParameters.newWebsite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteFromJSON(jsonValue));
    }

    /**
     */
    async websiteControllerCreate(requestParameters: WebsiteControllerCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Website> {
        const response = await this.websiteControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteControllerDeleteByIdRaw(requestParameters: WebsiteControllerDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websiteControllerDeleteById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/websites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async websiteControllerDeleteById(requestParameters: WebsiteControllerDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.websiteControllerDeleteByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteControllerFindRaw(requestParameters: WebsiteControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WebsiteWithRelations>>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/websites`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WebsiteWithRelationsFromJSON));
    }

    /**
     */
    async websiteControllerFind(requestParameters: WebsiteControllerFindRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WebsiteWithRelations>> {
        const response = await this.websiteControllerFindRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteControllerFindByIdRaw(requestParameters: WebsiteControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebsiteWithRelations>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websiteControllerFindById.');
        }

        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/websites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteWithRelationsFromJSON(jsonValue));
    }

    /**
     */
    async websiteControllerFindById(requestParameters: WebsiteControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebsiteWithRelations> {
        const response = await this.websiteControllerFindByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteControllerReplaceByIdRaw(requestParameters: WebsiteControllerReplaceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websiteControllerReplaceById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/websites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WebsiteToJSON(requestParameters.website),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async websiteControllerReplaceById(requestParameters: WebsiteControllerReplaceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.websiteControllerReplaceByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteControllerUpdateAllRaw(requestParameters: WebsiteControllerUpdateAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoopbackCount>> {
        const queryParameters: any = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/websites`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WebsitePartialToJSON(requestParameters.websitePartial),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoopbackCountFromJSON(jsonValue));
    }

    /**
     */
    async websiteControllerUpdateAll(requestParameters: WebsiteControllerUpdateAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoopbackCount> {
        const response = await this.websiteControllerUpdateAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteControllerUpdateByIdRaw(requestParameters: WebsiteControllerUpdateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websiteControllerUpdateById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/websites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WebsitePartialToJSON(requestParameters.websitePartial),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async websiteControllerUpdateById(requestParameters: WebsiteControllerUpdateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.websiteControllerUpdateByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
