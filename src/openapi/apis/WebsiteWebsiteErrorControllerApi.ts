/* tslint:disable */
/* eslint-disable */
/**
 * package or prject name
 * Website crawling
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoopbackCount,
  NewWebsiteErrorInWebsite,
  WebsiteError,
  WebsiteErrorPartial,
} from '../models/index';
import {
    LoopbackCountFromJSON,
    LoopbackCountToJSON,
    NewWebsiteErrorInWebsiteFromJSON,
    NewWebsiteErrorInWebsiteToJSON,
    WebsiteErrorFromJSON,
    WebsiteErrorToJSON,
    WebsiteErrorPartialFromJSON,
    WebsiteErrorPartialToJSON,
} from '../models/index';

export interface WebsiteWebsiteErrorControllerCreateRequest {
    id: string;
    newWebsiteErrorInWebsite?: NewWebsiteErrorInWebsite;
}

export interface WebsiteWebsiteErrorControllerDeleteRequest {
    id: string;
    where?: { [key: string]: any; };
}

export interface WebsiteWebsiteErrorControllerFindRequest {
    id: string;
    filter?: { [key: string]: any; };
}

export interface WebsiteWebsiteErrorControllerPatchRequest {
    id: string;
    where?: { [key: string]: any; };
    websiteErrorPartial?: WebsiteErrorPartial;
}

/**
 * 
 */
export class WebsiteWebsiteErrorControllerApi extends runtime.BaseAPI {

    /**
     */
    async websiteWebsiteErrorControllerCreateRaw(requestParameters: WebsiteWebsiteErrorControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebsiteError>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websiteWebsiteErrorControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/websites/{id}/website-errors`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewWebsiteErrorInWebsiteToJSON(requestParameters.newWebsiteErrorInWebsite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebsiteErrorFromJSON(jsonValue));
    }

    /**
     */
    async websiteWebsiteErrorControllerCreate(requestParameters: WebsiteWebsiteErrorControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebsiteError> {
        const response = await this.websiteWebsiteErrorControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteWebsiteErrorControllerDeleteRaw(requestParameters: WebsiteWebsiteErrorControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoopbackCount>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websiteWebsiteErrorControllerDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/websites/{id}/website-errors`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoopbackCountFromJSON(jsonValue));
    }

    /**
     */
    async websiteWebsiteErrorControllerDelete(requestParameters: WebsiteWebsiteErrorControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoopbackCount> {
        const response = await this.websiteWebsiteErrorControllerDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteWebsiteErrorControllerFindRaw(requestParameters: WebsiteWebsiteErrorControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WebsiteError>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websiteWebsiteErrorControllerFind.');
        }

        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/websites/{id}/website-errors`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WebsiteErrorFromJSON));
    }

    /**
     */
    async websiteWebsiteErrorControllerFind(requestParameters: WebsiteWebsiteErrorControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WebsiteError>> {
        const response = await this.websiteWebsiteErrorControllerFindRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websiteWebsiteErrorControllerPatchRaw(requestParameters: WebsiteWebsiteErrorControllerPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoopbackCount>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websiteWebsiteErrorControllerPatch.');
        }

        const queryParameters: any = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/websites/{id}/website-errors`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WebsiteErrorPartialToJSON(requestParameters.websiteErrorPartial),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoopbackCountFromJSON(jsonValue));
    }

    /**
     */
    async websiteWebsiteErrorControllerPatch(requestParameters: WebsiteWebsiteErrorControllerPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoopbackCount> {
        const response = await this.websiteWebsiteErrorControllerPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
