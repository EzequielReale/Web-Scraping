/* tslint:disable */
/* eslint-disable */
/**
 * searchservice
 * Website crawling
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WebsiteWithRelations } from './WebsiteWithRelations';
import {
    WebsiteWithRelationsFromJSON,
    WebsiteWithRelationsFromJSONTyped,
    WebsiteWithRelationsToJSON,
} from './WebsiteWithRelations';

/**
 * (tsType: FrequencyWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface FrequencyWithRelations
 */
export interface FrequencyWithRelations {
    /**
     * 
     * @type {string}
     * @memberof FrequencyWithRelations
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof FrequencyWithRelations
     */
    id?: string;
    /**
     * 
     * @type {Array<WebsiteWithRelations>}
     * @memberof FrequencyWithRelations
     */
    websites?: Array<WebsiteWithRelations>;
}

/**
 * Check if a given object implements the FrequencyWithRelations interface.
 */
export function instanceOfFrequencyWithRelations(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function FrequencyWithRelationsFromJSON(json: any): FrequencyWithRelations {
    return FrequencyWithRelationsFromJSONTyped(json, false);
}

export function FrequencyWithRelationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): FrequencyWithRelations {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'websites': !exists(json, 'websites') ? undefined : ((json['websites'] as Array<any>).map(WebsiteWithRelationsFromJSON)),
    };
}

export function FrequencyWithRelationsToJSON(value?: FrequencyWithRelations | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'id': value.id,
        'websites': value.websites === undefined ? undefined : ((value.websites as Array<any>).map(WebsiteWithRelationsToJSON)),
    };
}

