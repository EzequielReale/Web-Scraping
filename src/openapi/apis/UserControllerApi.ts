/* tslint:disable */
/* eslint-disable */
/**
 * searchservice
 * Website crawling
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoopbackCount,
  NewUser,
  User,
  UserFilter,
  UserFilter1,
  UserPartial,
  UserWithRelations,
} from '../models/index';
import {
    LoopbackCountFromJSON,
    LoopbackCountToJSON,
    NewUserFromJSON,
    NewUserToJSON,
    UserFromJSON,
    UserToJSON,
    UserFilterFromJSON,
    UserFilterToJSON,
    UserFilter1FromJSON,
    UserFilter1ToJSON,
    UserPartialFromJSON,
    UserPartialToJSON,
    UserWithRelationsFromJSON,
    UserWithRelationsToJSON,
} from '../models/index';

export interface UserControllerCountRequest {
    where?: { [key: string]: any; };
}

export interface UserControllerCreateRequest {
    newUser?: NewUser;
}

export interface UserControllerDeleteByIdRequest {
    id: string;
}

export interface UserControllerFindRequest {
    filter?: UserFilter1;
}

export interface UserControllerFindByIdRequest {
    id: string;
    filter?: UserFilter;
}

export interface UserControllerReplaceByIdRequest {
    id: string;
    user?: User;
}

export interface UserControllerUpdateAllRequest {
    where?: { [key: string]: any; };
    userPartial?: UserPartial;
}

export interface UserControllerUpdateByIdRequest {
    id: string;
    userPartial?: UserPartial;
}

/**
 * 
 */
export class UserControllerApi extends runtime.BaseAPI {

    /**
     */
    async userControllerCountRaw(requestParameters: UserControllerCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoopbackCount>> {
        const queryParameters: any = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoopbackCountFromJSON(jsonValue));
    }

    /**
     */
    async userControllerCount(requestParameters: UserControllerCountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoopbackCount> {
        const response = await this.userControllerCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerCreateRaw(requestParameters: UserControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewUserToJSON(requestParameters.newUser),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async userControllerCreate(requestParameters: UserControllerCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.userControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerDeleteByIdRaw(requestParameters: UserControllerDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userControllerDeleteById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async userControllerDeleteById(requestParameters: UserControllerDeleteByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.userControllerDeleteByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerFindRaw(requestParameters: UserControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserWithRelations>>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserWithRelationsFromJSON));
    }

    /**
     */
    async userControllerFind(requestParameters: UserControllerFindRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserWithRelations>> {
        const response = await this.userControllerFindRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerFindByIdRaw(requestParameters: UserControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWithRelations>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userControllerFindById.');
        }

        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserWithRelationsFromJSON(jsonValue));
    }

    /**
     */
    async userControllerFindById(requestParameters: UserControllerFindByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWithRelations> {
        const response = await this.userControllerFindByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerReplaceByIdRaw(requestParameters: UserControllerReplaceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userControllerReplaceById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async userControllerReplaceById(requestParameters: UserControllerReplaceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.userControllerReplaceByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerUpdateAllRaw(requestParameters: UserControllerUpdateAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoopbackCount>> {
        const queryParameters: any = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserPartialToJSON(requestParameters.userPartial),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoopbackCountFromJSON(jsonValue));
    }

    /**
     */
    async userControllerUpdateAll(requestParameters: UserControllerUpdateAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoopbackCount> {
        const response = await this.userControllerUpdateAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerUpdateByIdRaw(requestParameters: UserControllerUpdateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userControllerUpdateById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserPartialToJSON(requestParameters.userPartial),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async userControllerUpdateById(requestParameters: UserControllerUpdateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.userControllerUpdateByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
