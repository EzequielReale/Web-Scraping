/* tslint:disable */
/* eslint-disable */
/**
 * package or prject name
 * Website crawling
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoopbackCount,
  NewPageInWebsite,
  Page,
  PagePartial,
} from '../models/index';
import {
    LoopbackCountFromJSON,
    LoopbackCountToJSON,
    NewPageInWebsiteFromJSON,
    NewPageInWebsiteToJSON,
    PageFromJSON,
    PageToJSON,
    PagePartialFromJSON,
    PagePartialToJSON,
} from '../models/index';

export interface WebsitePageControllerCreateRequest {
    id: string;
    newPageInWebsite?: NewPageInWebsite;
}

export interface WebsitePageControllerDeleteRequest {
    id: string;
    where?: { [key: string]: any; };
}

export interface WebsitePageControllerFindRequest {
    id: string;
    filter?: { [key: string]: any; };
}

export interface WebsitePageControllerPatchRequest {
    id: string;
    where?: { [key: string]: any; };
    pagePartial?: PagePartial;
}

/**
 * 
 */
export class WebsitePageControllerApi extends runtime.BaseAPI {

    /**
     */
    async websitePageControllerCreateRaw(requestParameters: WebsitePageControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websitePageControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/websites/{id}/pages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewPageInWebsiteToJSON(requestParameters.newPageInWebsite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     */
    async websitePageControllerCreate(requestParameters: WebsitePageControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page> {
        const response = await this.websitePageControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websitePageControllerDeleteRaw(requestParameters: WebsitePageControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoopbackCount>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websitePageControllerDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/websites/{id}/pages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoopbackCountFromJSON(jsonValue));
    }

    /**
     */
    async websitePageControllerDelete(requestParameters: WebsitePageControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoopbackCount> {
        const response = await this.websitePageControllerDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websitePageControllerFindRaw(requestParameters: WebsitePageControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Page>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websitePageControllerFind.');
        }

        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/websites/{id}/pages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PageFromJSON));
    }

    /**
     */
    async websitePageControllerFind(requestParameters: WebsitePageControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Page>> {
        const response = await this.websitePageControllerFindRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async websitePageControllerPatchRaw(requestParameters: WebsitePageControllerPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoopbackCount>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling websitePageControllerPatch.');
        }

        const queryParameters: any = {};

        if (requestParameters.where !== undefined) {
            queryParameters['where'] = requestParameters.where;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/websites/{id}/pages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PagePartialToJSON(requestParameters.pagePartial),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoopbackCountFromJSON(jsonValue));
    }

    /**
     */
    async websitePageControllerPatch(requestParameters: WebsitePageControllerPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoopbackCount> {
        const response = await this.websitePageControllerPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
